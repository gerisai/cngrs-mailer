name:  Promote new version ðŸš€
run-name: Promote new version ðŸš€ ${{ github.run_number }}

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - '**.py'

env:
  AWS_REGION: us-west-2
  SERVICE_NAME: ${{ github.event.repository.name }}
  ECR_REPOSITORY: ${{ github.event.repository.name }}

jobs:
  deploy-ecr:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        id: aws-creds
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key	: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      - name: Build and push image
        id: build-push-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest .
          docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest
      
      - name: Remove unused tags
        id: remove-tags
        run: |
          # Fetch null images
          aws ecr list-images --repository-name ${ECR_REPOSITORY} \
          --query 'imageIds[?imageTag == null]' > null-tags.json

          # Remove them
          [[ $(cat null-tags.json) == '[]' ]] || aws ecr batch-delete-image --repository-name ${ECR_REPOSITORY} \
          --image-ids file://null-tags.json

          # Fetch non latest tags
          aws ecr list-images --repository-name ${ECR_REPOSITORY} \
          --query 'imageIds[?imageTag != `latest`]' > non-recent-tags.json

          # Remove them
          [[ $(cat non-recent-tags.json) == '[]' ]] || aws ecr batch-delete-image --repository-name ${ECR_REPOSITORY} \
          --image-ids file://non-recent-tags.json

      - name: Get AppRunner Service ARN
        run: |
            echo "SERVICE_ARN=$(aws apprunner list-services | jq -r \
            '.ServiceSummaryList[] | select(.ServiceName == env.SERVICE_NAME).ServiceArn')" >> $GITHUB_ENV

      - name: Redeploy Lambda
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          aws lambda update-function-code --function-name $SERVICE_NAME \
          --image-uri ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest
